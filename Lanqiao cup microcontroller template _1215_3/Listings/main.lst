C51 COMPILER V9.59.0.0   MAIN                                                              12/16/2024 17:10:15 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Software\Keilv5\Keil\Core\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRI
                    -NT(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "all.h"
   2          xdata struct _cj cj;
   3          // 调度器相关函数声明
   4          void Scheduler_Init(void);
   5          void Scheduler_Run(void);
   6          // 系统初始化函数
   7          void init()
   8          {
   9   1          // 初始化继电器和蜂鸣器
  10   1          off(JDQ);off(FMQ);
  11   1          // 初始化PCA计数器超声波模块
  12   1          CMOD=CH=CL=0;
  13   1          // 初始化实时时钟、AD模块和温度传感器
  14   1          rtc_run(0x00,0x01,0x21);
  15   1          init_ad(0x43);
  16   1          init_temp();
  17   1          // 初始化控制结构体cj
  18   1          cj.state=10;
  19   1          cj.h=0;cj.m=1;cj.s=21;
  20   1          cj.key=0;cj.freq = 0;
  21   1          // 初始化调度器
  22   1          Scheduler_Init();
  23   1          // 初始化串口和用户接口
  24   1          Uart1_Init();
  25   1          uu_init();
  26   1          // 初始化定时器0和定时器1
  27   1          Timer0_Init();
  28   1          Timer1_Init();//习惯初始化定时器中断放最后
  29   1      }
  30          
  31          // 主函数
  32          void main()
  33          {
  34   1          // 系统初始化
  35   1          init();
  36   1          // 打开中断，开始正常运行
  37   1          EA=1;
  38   1          while(1)
  39   1          {
  40   2              Scheduler_Run();// 运行调度器
  41   2          }
  42   1      }
  43          // 调度器任务结构体定义
  44          typedef struct
  45          {
  46              void (*task_func)(void);    // 任务函数
  47              unsigned long int rate_ms;  // 任务执行周期（毫秒）
  48              unsigned long int last_run; // 任务上次运行时间
  49          } task_t;
  50          // 调度器任务列表
  51          idata task_t Scheduler_Task[] = {
  52              {led_proc, 10, 0},        // LED任务，每20毫秒执行一次
  53              {key_proc, 10, 0},        // 键盘任务，每20毫秒执行一次
  54              {smg_proc, 50, 0},        // 数码管任务，每100毫秒执行一次
C51 COMPILER V9.59.0.0   MAIN                                                              12/16/2024 17:10:15 PAGE 2   

  55              {uart_proc, 5, 0},            // 串口任务，每10毫秒执行一次
  56              {temp_proc, 100, 0},      // 温度任务，每200毫秒执行一次
  57              {wave_proc, 75, 0},       // 距离任务，每150毫秒执行一次
  58              {rtc_proc, 250, 0},       // 时间任务，每500毫秒执行一次
  59              {adc_proc, 80, 0},        // AD/DA任务，每160毫秒执行一次
  60          };
  61          
  62          idata u8 task_num;//任务数量
  63          //调度器初始化
  64          void Scheduler_Init(void)
  65          {
  66   1          task_num = sizeof(Scheduler_Task) / sizeof(task_t); // 计算任务数量
  67   1      }
  68          //调度器运行
  69          void Scheduler_Run(void)
  70          {
  71   1          u8 i;
  72   1          for (i = 0; i < task_num; i++)
  73   1          {
  74   2              unsigned long int now_time = uwTick;// 获取当前时间 
  75   2              if (now_time >= (Scheduler_Task[i].last_run + Scheduler_Task[i].rate_ms))// 检查任务是否需要执行
  76   2              {
  77   3                  Scheduler_Task[i].last_run = now_time; // 更新任务上次运行时间
  78   3                  Scheduler_Task[i].task_func();// 执行任务         
  79   3              }
  80   2          }
  81   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    207    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     14    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       5
   IDATA SIZE       =     89    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
