C51 COMPILER V9.59.0.0   SMG                                                               12/25/2024 09:59:26 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE SMG
OBJECT MODULE PLACED IN .\Objects\smg.obj
COMPILER INVOKED BY: C:\Software\Keilv5\Keil\Core\C51\BIN\C51.EXE Drivers\smg.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Driver
                    -s) DEBUG OBJECTEXTEND PRINT(.\Listings\smg.lst) OBJECT(.\Objects\smg.obj)

line level    source

   1          #include "smg.h"
   2          code unsigned char smg[] =
   3          {
   4          0xc0, //0
   5          0xf9, //1
   6          0xa4, //2
   7          0xb0, //3
   8          0x99, //4
   9          0x92, //5
  10          0x82, //6
  11          0xf8, //7
  12          0x80, //8
  13          0x90, //9
  14          0x88, //A
  15          0x83, //b
  16          0xc6, //C
  17          0xa1, //d
  18          0x86, //E
  19          0x8e //F
  20          };
  21          
  22          u8 dis_buf[8]={0,0,0,0,0,0,0,0};
  23          u8 dis_str[11];
  24          //**************************************************************//
  25          void disp_scan()
  26          {
  27   1          static u8 i=0;                                // 使用静态变量 i 记忆当前扫描位置
  28   1          P0=0;                                         // 关闭所有数码管
  29   1          gate(WEI);                                    // 设置位选信号
  30   1          P0=dis_buf[i];                                // 显示当前位数码管的数据
  31   1          gate(DUAN);                                   // 设置段选信号
  32   1          P0=1<<i;                                      // 选择当前位数码管
  33   1          gate(WEI);                                    // 设置位选信号
  34   1          if(++i==8)i=0;                                // 更新扫描位置，若达到最大值则重置为0
  35   1      }
  36          //**************************************************************//
  37          void disp_proc()
  38          {
  39   1          u8 i,j,tmp=0;                                 // 初始化索引变量和临时变量
  40   1          for(i=0;i<8;i++,j++)                          // 循环处理每一位数码管
  41   1          {
  42   2              switch(dis_str[j])                          // 根据字符设置对应的数码管显示值
  43   2              {
  44   3                  case '0':tmp=smg[0];break;              // 字符 '0' 对应的数码管显示值
  45   3                  case '1':tmp=smg[1];break;              // 字符 '1' 对应的数码管显示值
  46   3                  case '2':tmp=smg[2];break;              // 字符 '2' 对应的数码管显示值
  47   3                  case '3':tmp=smg[3];break;              // 字符 '3' 对应的数码管显示值
  48   3                  case '4':tmp=smg[4];break;              // 字符 '4' 对应的数码管显示值
  49   3                  case '5':tmp=smg[5];break;              // 字符 '5' 对应的数码管显示值
  50   3                  case '6':tmp=smg[6];break;              // 字符 '6' 对应的数码管显示值
  51   3                  case '7':tmp=smg[7];break;              // 字符 '7' 对应的数码管显示值
  52   3                  case '8':tmp=smg[8];break;              // 字符 '8' 对应的数码管显示值
  53   3                  case '9':tmp=smg[9];break;              // 字符 '9' 对应的数码管显示值
  54   3                  case 'A':tmp=smg[10];break;             // 字符 'A' 对应的数码管显示值
C51 COMPILER V9.59.0.0   SMG                                                               12/25/2024 09:59:26 PAGE 2   

  55   3                  case 'b':tmp=smg[11];break;             // 字符 'b' 对应的数码管显示值
  56   3                  case 'C':tmp=smg[12];break;             // 字符 'C' 对应的数码管显示值
  57   3                  case 'd':tmp=smg[13];break;             // 字符 'd' 对应的数码管显示值
  58   3                  case 'E':tmp=smg[14];break;             // 字符 'E' 对应的数码管显示值
  59   3                  case 'F':tmp=smg[15];break;             // 字符 'F' 对应的数码管显示值
  60   3                  case '-':tmp=0xbf;break;                // 字符 '-' 对应的数码管显示值
  61   3                  default:tmp=0xff;break;                 // 默认情况下的数码管显示值
  62   3              }
  63   2              if(dis_str[j+1]=='.')                       // 检查下一个字符是否为小数点
  64   2              {
  65   3                  tmp&=0x7f;                              // 如果有小数点，则点亮小数点
  66   3                  j++;                                    // 跳过小数点字符
  67   3              }
  68   2              dis_buf[i]=tmp;                             // 将处理后的值存入显示缓冲区
  69   2          }
  70   1      }
  71          //**************************************************************//
  72          u8 f_wei=0;//smg闪烁标志
  73          void smg_proc()
  74          {
  75   1          switch(cj.state)                                // 根据状态选择不同的显示格式
  76   1          {
  77   2              case 10:
  78   2                  if(f_wei)
  79   2                      sprintf(dis_str,"F%02bu-%02bubb",cj.m,cj.s); // 格式化字符串，显示频率和时间
  80   2                  else
  81   2                      sprintf(dis_str,"   -%02bubb",cj.s);         // 格式化字符串，显示时间
  82   2                  break;
  83   2              case 20:
  84   2                  if(f_wei)
  85   2                      sprintf(dis_str,"d    %3bu",cj.key);          // 格式化字符串，显示按键值
  86   2                  else
  87   2                      sprintf(dis_str,"E  %5u",cj.freq);           // 格式化字符串，显示频率
  88   2                  break;
  89   2              case 30:sprintf(dis_str,"b%3.1f %3bu",cj.t,cj.d);break; // 格式化字符串，显示温度和距
             -离
  90   2              case 40:sprintf(dis_str,"A    %3bu",cj.ad);break;     // 格式化字符串，显示AD值
  91   2          }
  92   1          disp_proc();                                    // 调用 disp_proc 函数进行显示处理
  93   1      }
  94          
  95          
  96          
  97          
  98          
  99          
 100          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    431    ----
   CONSTANT SIZE    =     82    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     21       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
