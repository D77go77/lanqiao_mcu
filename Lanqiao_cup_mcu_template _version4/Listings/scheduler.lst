C51 COMPILER V9.59.0.0   SCHEDULER                                                         12/25/2024 09:59:25 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE SCHEDULER
OBJECT MODULE PLACED IN .\Objects\scheduler.obj
COMPILER INVOKED BY: C:\Software\Keilv5\Keil\Core\C51\BIN\C51.EXE Drivers\scheduler.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\
                    -Drivers) DEBUG OBJECTEXTEND PRINT(.\Listings\scheduler.lst) OBJECT(.\Objects\scheduler.obj)

line level    source

   1          #include "scheduler.h"
   2          
   3          // 调度器任务结构体定义
   4          typedef struct
   5          {
   6              void (*task_func)(void);    // 任务函数
   7              unsigned long int rate_ms;  // 任务执行周期（毫秒）
   8              unsigned long int last_run; // 任务上次运行时间
   9          } task_t;
  10          // 调度器任务列表
  11          idata task_t Scheduler_Task[] = {
  12                  {led_scan,10,0},                  // LED端口扫描，每20毫秒执行一次
  13              {led_proc, 10, 0},        // LED任务，每20毫秒执行一次
  14              {smg_proc, 50, 0},        // 数码管任务，每100毫秒执行一次
  15                  {led_smg_blink,250,0},    //led & smg 闪烁函数，每1ms执行一次
  16                  {key_proc, 10, 0},        // 键盘任务，每20毫秒执行一次
  17              {uart_proc, 5, 0},            // 串口任务，每10毫秒执行一次
  18                  {uart_timeout,5,0},           // 串口超时处理，每10毫秒执行一次
  19              {temp_proc, 100, 0},      // 温度任务，每200毫秒执行一次
  20              {wave_proc, 75, 0},       // 距离任务，每150毫秒执行一次
  21              {rtc_proc, 250, 0},       // 时间任务，每500毫秒执行一次
  22              {adc_proc, 80, 0},        // AD/DA任务，每160毫秒执行一次
  23          };
  24          
  25          idata u8 task_num;//任务数量
  26          //调度器初始化
  27          void Scheduler_Init(void)
  28          {
  29   1          task_num = sizeof(Scheduler_Task) / sizeof(task_t); // 计算任务数量
  30   1      }
  31          //调度器运行
  32          void Scheduler_Run(void)
  33          {
  34   1          u8 i;
  35   1          for (i = 0; i < task_num; i++)
  36   1          {
  37   2              unsigned long int now_time = uwTick;// 获取当前时间 
  38   2              if (now_time >= (Scheduler_Task[i].last_run + Scheduler_Task[i].rate_ms))// 检查任务是否需要执行
  39   2              {
  40   3                  Scheduler_Task[i].last_run = now_time; // 更新任务上次运行时间
  41   3                  Scheduler_Task[i].task_func();// 执行任务         
  42   3              }
  43   2          }
  44   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    122    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       5
   IDATA SIZE       =    122    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.59.0.0   SCHEDULER                                                         12/25/2024 09:59:25 PAGE 2   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
