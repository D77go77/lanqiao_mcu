C51 COMPILER V9.59.0.0   MAIN                                                              11/09/2024 13:02:17 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\01_Sdk\keil_v5\Core\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\L
                    -istings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "all.h"
   2          xdata struct caiji cj;
   3          //
   4          volatile u8 bdata led_dat = 0;
   5          sbit L1 = led_dat ^ 0;
   6          sbit L2 = led_dat ^ 1;
   7          sbit L3 = led_dat ^ 2;
   8          sbit L4 = led_dat ^ 3;
   9          sbit L5 = led_dat ^ 4;
  10          sbit L6 = led_dat ^ 5;
  11          sbit L7 = led_dat ^ 6;
  12          sbit L8 = led_dat ^ 7;
  13          //
  14          u8 run_state=10;
  15          bit f_cj=0; //0-未采集 1-采集
  16          //
  17          void main_init();
  18          void state_mainloop();
  19          void key_mainloop();
  20          void rtc_mainloop();
  21          void led_mainloop();
  22          void freq_mainloop();
  23          void dac_out();
  24          //******************
  25          void main()
  26          {
  27   1        main_init();
  28   1        EA=1;
  29   1        while(1)
  30   1        {
  31   2          state_mainloop();
  32   2          key_mainloop();
  33   2          rtc_mainloop();
  34   2          freq_mainloop();
  35   2        }
  36   1      }
  37          //*******************
  38          void main_init()
  39          {
  40   1        off(JDQ); off(FMQ);
  41   1        ne555_Init();
  42   1        Timer1_Init();
  43   1        
  44   1        cj.f=-100;
  45   1        cj.f_lim=2000;
  46   1        cj.f_jiao=0;
  47   1        cj.f_max=0;
  48   1        cj.h_save=0;
  49   1        cj.m_save=0;
  50   1        cj.s_save=0;
  51   1        cj.h=20;
  52   1        cj.m=20;
  53   1        cj.s=20;
  54   1        
C51 COMPILER V9.59.0.0   MAIN                                                              11/09/2024 13:02:17 PAGE 2   

  55   1        rtc_init();
  56   1        rtc_run(0x00,0x00,0x00);
  57   1      }
  58          //*******************
  59          void state_mainloop()
  60          {
  61   1        if(!f_100ms_state) return;
  62   1        f_100ms_state=0;
  63   1        
  64   1        switch(run_state)
  65   1        {
  66   2          case 10: //数据显示界面 频率
  67   2            if(cj.f>0) sprintf(dis_str,"F  %5ld",cj.f);
  68   2            else sprintf(dis_str,"F     LL");
  69   2          break;
  70   2          
  71   2          case 20: //参数界面 超限参数
  72   2            sprintf(dis_str,"P1  %4u",cj.f_lim_tmp);
  73   2          break;
  74   2          
  75   2          case 21: //参数界面 校准值
  76   2            sprintf(dis_str,"P2  %4d",cj.f_jiao_tmp);
  77   2          break;
  78   2          
  79   2          case 30: //时间界面
  80   2            sprintf(dis_str,"%02bu-%02bu-%02bu",cj.h,cj.m,cj.s);
  81   2          break;
  82   2          
  83   2          case 40: //回显界面 最大频率
  84   2            if(f_cj) sprintf(dis_str,"HF %5u",cj.f_max);
  85   2            else sprintf(dis_str,"HF      ");
  86   2          break;
  87   2          
  88   2          case 41: //回显界面 时间
  89   2            if(f_cj) sprintf(dis_str,"HA%02bu%02bu%02bu",cj.h_save,cj.m_save,cj.s_save);
  90   2            else sprintf(dis_str,"HA      ");
  91   2          break;
  92   2        }
  93   1        disp_proc();
  94   1      }
  95          //*******************
  96          void key_mainloop()
  97          {
  98   1        if(!f_20ms_key) return;
  99   1        f_20ms_key=0;
 100   1        key_proc();
 101   1        
 102   1        if(!key_code) return;
 103   1        
 104   1        switch(key_code)
 105   1        {
 106   2          case 4:
 107   2            switch(run_state)
 108   2            {
 109   3              case 10: 
 110   3                run_state=20; 
 111   3                cj.f_lim_tmp=cj.f_lim; cj.f_jiao_tmp=cj.f_jiao;
 112   3              break;
 113   3              
 114   3              case 20:
 115   3              case 21: 
 116   3                run_state=30; 
C51 COMPILER V9.59.0.0   MAIN                                                              11/09/2024 13:02:17 PAGE 3   

 117   3                cj.f_lim=cj.f_lim_tmp; cj.f_jiao=cj.f_jiao_tmp;
 118   3              break;
 119   3              
 120   3              case 30: run_state=40; break;
 121   3                
 122   3              case 40:
 123   3              case 41: run_state=10; break;
 124   3            }
 125   2          break;
 126   2          
 127   2          case 5:
 128   2            switch(run_state)
 129   2            {
 130   3              case 20: run_state=21; break;
 131   3              case 21: run_state=20; break;
 132   3              case 40: run_state=41; break;
 133   3              case 41: run_state=40; break;
 134   3            }
 135   2          break;
 136   2          
 137   2          case 8:
 138   2            switch(run_state)
 139   2            {
 140   3              case 20: cj.f_lim_tmp+=1000; if(cj.f_lim_tmp>9000) cj.f_lim_tmp=9000; break;
 141   3              case 21: cj.f_jiao_tmp+=100; if(cj.f_jiao_tmp>900) cj.f_jiao_tmp=900; break;
 142   3            }
 143   2          break;
 144   2          
 145   2          case 9:
 146   2            switch(run_state)
 147   2            {
 148   3              case 20: cj.f_lim_tmp-=1000; if(cj.f_lim_tmp<1000) cj.f_lim_tmp=1000; break;
 149   3              case 21: cj.f_jiao_tmp-=100; if(cj.f_jiao_tmp<-900) cj.f_jiao_tmp=-900; break;
 150   3            }
 151   2          break;  
 152   2        }
 153   1        
 154   1        key_code=0;
 155   1      }
 156          //*******************
 157          void rtc_mainloop()
 158          {
 159   1        u8 h,m,s;
 160   1        static u8 old_s;
 161   1        
 162   1        if(!f_100ms_rtc) return;
 163   1        f_100ms_rtc=0;
 164   1        
 165   1        h=Read_Ds1302_Byte(0x85);
 166   1        m=Read_Ds1302_Byte(0x83);
 167   1        s=Read_Ds1302_Byte(0x81);
 168   1      
 169   1        if(old_s==s) return;
 170   1        old_s=s;
 171   1        
 172   1        cj.h=((h>>4)*10)+(h&0x0f);
 173   1        cj.m=((m>>4)*10)+(m&0x0f);
 174   1        cj.s=((s>>4)*10)+(s&0x0f);
 175   1      }
 176          //*******************
 177          void freq_mainloop()
 178          {
C51 COMPILER V9.59.0.0   MAIN                                                              11/09/2024 13:02:17 PAGE 4   

 179   1        if(!f_100ms_freq) return;
 180   1        f_100ms_freq=0;
 181   1        
 182   1        cj.f=(long int)freq+cj.f_jiao;
 183   1        
 184   1        if(cj.f>=0) dac_out();
 185   1        else write_dac(0);
 186   1        
 187   1        if(cj.f>cj.f_max)
 188   1        {
 189   2          f_cj=1;
 190   2          cj.f_max=cj.f;
 191   2          cj.h_save=cj.h_save;
 192   2          cj.m_save=cj.m_save;
 193   2          cj.s_save=cj.s_save;
 194   2        }
 195   1      }
 196          //*******************
 197          void dac_out()
 198          {
 199   1        if(cj.f<=500) cj.da_v=1;
 200   1        else if(cj.f>=cj.f_lim) cj.da_v=5;
 201   1        else cj.da_v=4.0/(cj.f_lim-500.0)+1.0;
 202   1        
 203   1        cj.da_dat=cj.da_v/5.0*255;
 204   1        write_dac(cj.da_dat);
 205   1      }
 206          //*******************
 207          void led_proc()
 208          {
 209   1        led_dat=0;
 210   1        
 211   1        switch(run_state)
 212   1        {
 213   2          case 10: L1=f_100ms_led; break;
 214   2        }
 215   1        
 216   1        if(cj.f>cj.f_lim) L2=f_100ms_led;
 217   1        
 218   1        if(cj.f<0) L2=1;
 219   1        
 220   1        P0=~led_dat;
 221   1        gate(LED);
 222   1      }
 223          //*******************
 224          
 225          //*******************
 226          
 227          //*******************
 228          
 229          
 230          
 231          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1187    ----
   CONSTANT SIZE    =     94    ----
   XDATA SIZE       =     25    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3       2
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.59.0.0   MAIN                                                              11/09/2024 13:02:17 PAGE 5   

   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
