C51 COMPILER V9.59.0.0   IIC                                                               11/09/2024 13:00:31 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE IIC
OBJECT MODULE PLACED IN .\Objects\iic.obj
COMPILER INVOKED BY: D:\01_Sdk\keil_v5\Core\C51\BIN\C51.EXE iic.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Li
                    -stings\iic.lst) TABS(2) OBJECT(.\Objects\iic.obj)

line level    source

   1          /*  #   I2C代码片段说明
   2            1.  本文件夹中提供的驱动代码供参赛选手完成程序设计参考。
   3            2.  参赛选手可以自行编写相关代码或以该代码为基础，根据所选单片机类型、运行速度和试题
   4              中对单片机时钟频率的要求，进行代码调试和修改。
   5          */
   6          #include "iic.h"
   7          
   8          #define DELAY_TIME  10
   9          void Delay5ms(void);
  10          //
  11          static void I2C_Delay(unsigned char n)
  12          {
  13   1          do
  14   1          {
  15   2              _nop_();_nop_();_nop_();_nop_();_nop_();
  16   2              _nop_();_nop_();_nop_();_nop_();_nop_();
  17   2              _nop_();_nop_();_nop_();_nop_();_nop_();    
  18   2          }
  19   1          while(n--);       
  20   1      }
  21          
  22          //
  23          void I2CStart(void)
  24          {
  25   1          sda = 1;
  26   1          scl = 1;
  27   1        I2C_Delay(DELAY_TIME);
  28   1          sda = 0;
  29   1        I2C_Delay(DELAY_TIME);
  30   1          scl = 0;    
  31   1      }
  32          
  33          //
  34          void I2CStop(void)
  35          {
  36   1          sda = 0;
  37   1          scl = 1;
  38   1        I2C_Delay(DELAY_TIME);
  39   1          sda = 1;
  40   1        I2C_Delay(DELAY_TIME);
  41   1      }
  42          
  43          //
  44          void I2CSendByte(unsigned char byt)
  45          {
  46   1          unsigned char i;
  47   1        
  48   1          for(i=0; i<8; i++){
  49   2              scl = 0;
  50   2          I2C_Delay(DELAY_TIME);
  51   2              if(byt & 0x80){
  52   3                  sda = 1;
  53   3              }
  54   2              else{
C51 COMPILER V9.59.0.0   IIC                                                               11/09/2024 13:00:31 PAGE 2   

  55   3                  sda = 0;
  56   3              }
  57   2          I2C_Delay(DELAY_TIME);
  58   2              scl = 1;
  59   2              byt <<= 1;
  60   2          I2C_Delay(DELAY_TIME);
  61   2          }
  62   1        
  63   1          scl = 0;  
  64   1      }
  65          
  66          //
  67          unsigned char I2CReceiveByte(void)
  68          {
  69   1        unsigned char da;
  70   1        unsigned char i;
  71   1        for(i=0;i<8;i++){   
  72   2          scl = 1;
  73   2          I2C_Delay(DELAY_TIME);
  74   2          da <<= 1;
  75   2          if(sda) 
  76   2            da |= 0x01;
  77   2          scl = 0;
  78   2          I2C_Delay(DELAY_TIME);
  79   2        }
  80   1        return da;    
  81   1      }
  82          
  83          //
  84          unsigned char I2CWaitAck(void)
  85          {
  86   1        unsigned char ackbit;
  87   1        
  88   1          scl = 1;
  89   1        I2C_Delay(DELAY_TIME);
  90   1          ackbit = sda; 
  91   1          scl = 0;
  92   1        I2C_Delay(DELAY_TIME);
  93   1        
  94   1        return ackbit;
  95   1      }
  96          
  97          //
  98          void I2CSendAck(unsigned char ackbit)
  99          {
 100   1          scl = 0;
 101   1          sda = ackbit; 
 102   1        I2C_Delay(DELAY_TIME);
 103   1          scl = 1;
 104   1        I2C_Delay(DELAY_TIME);
 105   1          scl = 0; 
 106   1        sda = 1;
 107   1        I2C_Delay(DELAY_TIME);
 108   1      }
 109          
 110          void init_ad(u8 add)
 111          {
 112   1        I2CStart();
 113   1        I2CSendByte(0x90);
 114   1        I2CWaitAck();
 115   1        I2CSendByte(add);
 116   1        I2CWaitAck();
C51 COMPILER V9.59.0.0   IIC                                                               11/09/2024 13:00:31 PAGE 3   

 117   1        I2CStop();
 118   1      }
 119          
 120          u8 read_ad()
 121          {
 122   1        u8 dat;
 123   1        I2CStart();
 124   1        I2CSendByte(0x91);
 125   1        I2CWaitAck();
 126   1        dat=I2CReceiveByte();
 127   1        I2CSendAck(1);
 128   1        I2CStop();
 129   1        
 130   1        return dat;
 131   1      }
 132          
 133          void write_dac(u8 add)
 134          {
 135   1        I2CStart();
 136   1        I2CSendByte(0x90);
 137   1        I2CWaitAck();
 138   1        I2CSendByte(0x43);
 139   1        I2CWaitAck();
 140   1        I2CSendByte(add);
 141   1        I2CWaitAck();
 142   1        I2CStop();
 143   1      }
 144          
 145          void w_e2prom(u8 add,u8 val)
 146          {
 147   1        I2CStart();
 148   1        I2CSendByte(0xa0);
 149   1        I2CWaitAck();
 150   1        I2CSendByte(add);
 151   1        I2CWaitAck();
 152   1        I2CSendByte(val);
 153   1        I2CWaitAck();
 154   1        I2CStop();
 155   1        Delay5ms();
 156   1      }
 157          
 158          u8 r_e2prom(u8 add)
 159          {
 160   1        u8 dat;
 161   1        
 162   1        I2CStart();
 163   1        I2CSendByte(0xa0);
 164   1        I2CWaitAck();
 165   1        I2CSendByte(add);
 166   1        I2CWaitAck();
 167   1        
 168   1      
 169   1        I2CStart();
 170   1        I2CSendByte(0xa1);
 171   1        I2CWaitAck();
 172   1        dat=I2CReceiveByte();
 173   1        I2CSendAck(1);
 174   1        I2CStop();
 175   1        Delay5ms();
 176   1        return dat;
 177   1      }
 178          
C51 COMPILER V9.59.0.0   IIC                                                               11/09/2024 13:00:31 PAGE 4   

 179          void Delay5ms(void) //@12.000MHz
 180          {
 181   1        unsigned char data i, j;
 182   1      
 183   1        i = 59;
 184   1        j = 90;
 185   1        do
 186   1        {
 187   2          while (--j);
 188   2        } while (--i);
 189   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    327    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
